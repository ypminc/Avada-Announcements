<?php

/**
 * Plugin Name: YPM Avada
 * Plugin URI: http://www.mywebsite.com/my-first-plugin
 * Description: In-House Plugin Development with various custom elements to choose from.
 * Version: 0.1
 * Author: Developer
 * Author URI: http://www.mywebsite.com
 * @package         Sitepoint_Settings_Api
 */



/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class OptionTest {
	private $option_test_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'option_test_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'option_test_page_init' ) );
	}

	public function option_test_add_plugin_page() {
		add_menu_page(
			'Option Test', // page_title
			'Option Test', // menu_title
			'manage_options', // capability
			'option-test', // menu_slug
			array( $this, 'option_test_create_admin_page' ), // function
			'dashicons-admin-network', // icon_url
			3 // position
		);
	}

	public function option_test_create_admin_page() {
		$this->option_test_options = get_option( 'option_test_option_name' ); ?>

		<div class="wrap">
			<h2>Option Test</h2>
			<p>This is Test Description</p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'option_test_option_group' );
					do_settings_sections( 'option-test-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function option_test_page_init() {
		register_setting(
			'option_test_option_group', // option_group
			'option_test_option_name', // option_name
			array( $this, 'option_test_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'option_test_setting_section', // id
			'Settings', // title
			array( $this, 'option_test_section_info' ), // callback
			'option-test-admin' // page
		);

		add_settings_field(
			'test_label_0', // id
			'test-label', // title
			array( $this, 'test_label_0_callback' ), // callback
			'option-test-admin', // page
			'option_test_setting_section' // section
		);
	}

	public function option_test_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['test_label_0'] ) ) {
			$sanitary_values['test_label_0'] = sanitize_text_field( $input['test_label_0'] );
		}

		return $sanitary_values;
	}

	public function option_test_section_info() {
		
	}

	public function test_label_0_callback() {
		printf(
			'<input class="regular-text" type="text" name="option_test_option_name[test_label_0]" id="test_label_0" value="%s">',
			isset( $this->option_test_options['test_label_0'] ) ? esc_attr( $this->option_test_options['test_label_0']) : ''
		);
	}

}
if ( is_admin() )
	$option_test = new OptionTest();

/* 
 * Retrieve this value with:
 * $option_test_options = get_option( 'option_test_option_name' ); // Array of All Options
 * $test_label_0 = $option_test_options['test_label_0']; // test-label
 */











/*

function global_custom_options()
{
?>
    <div class="wrap">
        <h2>Global Custom Options</h2>
        <form method="post" action="options.php">
            <?php wp_nonce_field('update-options') ?>
            <p><strong>Twitter ID:</strong><br />
                <input type="text" name="twitterid" size="45" value="<?php echo get_option('twitterid'); ?>" />
            </p>
            <p><input type="submit" name="Submit" value="Store Options" /></p>
            <input type="hidden" name="action" value="update" />
            <input type="hidden" name="page_options" value="twitterid" />
        </form>
    </div>
<?php
}
?>
